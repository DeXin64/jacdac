// Autogenerated C header file for Timeseries Aggregator
#ifndef _JACDAC_SPEC_TIMESERIES_AGGREGATOR_H
#define _JACDAC_SPEC_TIMESERIES_AGGREGATOR_H 1

#define JD_SERVICE_CLASS_TIMESERIES_AGGREGATOR  0x1192bdcc

// enum DataMode (uint8_t)
#define JD_TIMESERIES_AGGREGATOR_DATA_MODE_CONTINUOUS 0x1
#define JD_TIMESERIES_AGGREGATOR_DATA_MODE_DISCRETE 0x2

/**
 * No args. Remove all pending timeseries.
 */
#define JD_TIMESERIES_AGGREGATOR_CMD_CLEAR 0x80

/**
 * Starts a new timeseries.
 * As for `mode`,
 * `Continuous` has default aggregation window of 60s,
 * and `Discrete` only stores the data if it has changed since last store,
 * and has default window of 1s.
 */
#define JD_TIMESERIES_AGGREGATOR_CMD_START_TIMESERIES 0x81
typedef struct jd_timeseries_aggregator_start_timeseries {
    uint32_t id;
    uint8_t mode;  // DataMode
    char label[0];  // string
} jd_timeseries_aggregator_start_timeseries_t;


/**
 * Add a data point to a timeseries.
 */
#define JD_TIMESERIES_AGGREGATOR_CMD_UPDATE 0x83
typedef struct jd_timeseries_aggregator_update {
    double value;  // f64
    uint32_t id;
} jd_timeseries_aggregator_update_t;


/**
 * Set aggregation window.
 */
#define JD_TIMESERIES_AGGREGATOR_CMD_SET_WINDOW 0x84
typedef struct jd_timeseries_aggregator_set_window {
    uint32_t id;
    uint32_t duration; // ms
} jd_timeseries_aggregator_set_window_t;


/**
 * Indicates that the average, minimum and maximum value of a given
 * timeseries are as indicated.
 * It also says how many samples were collected, and the collection period.
 * Timestamps are given using device's internal clock, which will wrap around.
 * Typically, `end_time` can be assumed to be "now".
 */
#define JD_TIMESERIES_AGGREGATOR_CMD_STORED 0x85
typedef struct jd_timeseries_aggregator_stored_report {
    uint32_t id;
    uint32_t num_samples; // #
    double avg;  // f64
    double min;  // f64
    double max;  // f64
    uint32_t start_time; // ms
    uint32_t end_time; // ms
} jd_timeseries_aggregator_stored_report_t;


/**
 * Read-only Î¼s uint32_t. This register is automatically broadcast and can be also queried to establish local time on the device.
 */
#define JD_TIMESERIES_AGGREGATOR_REG_NOW 0x180

/**
 * Read-write bool (uint8_t). When `true`, the windows will be shorter after service reset and gradually extend to requested length.
 * This makes the sensor look more responsive.
 */
#define JD_TIMESERIES_AGGREGATOR_REG_FAST_START 0x80

/**
 * Read-write ms uint32_t. Window applied to automatically created continuous timeseries.
 * Note that windows returned initially may be shorter.
 */
#define JD_TIMESERIES_AGGREGATOR_REG_CONTINUOUS_WINDOW 0x81

/**
 * Read-write ms uint32_t. Window applied to automatically created discrete timeseries.
 */
#define JD_TIMESERIES_AGGREGATOR_REG_DISCRETE_WINDOW 0x82

#endif
